import numpy as np

# 배열의 인덱싱
a = np.array([1, 2, 3, 4, 5])
print(a[2])  # 3 왼쪽 0부터
print(a[-1]) # 5 오른쪽에서 -1부터
print(a[-2]) # 4

print("ㅡ" * 30)

# 다차원배열 인덱싱
b = np.array([[0, 1, 2], [3, 4, 5]])
print(b[0])     # 첫번째행 전체
print(b[0, 0])   # 첫번째행 첫번째열 => 0
print(b[-1, -1])   # 마지막행 마지막열 => 5

print("ㅡ" * 30)

# 슬라이싱(특정한 영역 추출) 
c = np.array([[0, 1, 2, 3], [4, 5, 6, 7]])
print(c)
print(c[0])      # 첫번째행 전체
print(c[0, :])   # 첫번째행 전체
print(c[:, 1])   # 두번째열 전체
print(c[1, 1:])  # 두번째행, 두번째열 뒤로 전체
print(c[:1, :2]) # 첫번째행, 두번째열 까지만 (**끝은 포함하지 않는다.)

print("ㅡ" * 30)

'''
 문제  0~14의 값을 이용해서 3*5 numpy 행렬 을 만들고 
1. 행렬에서 7을 인덱싱 하세요 
2. 행렬에서 14를 인덱싱 하세요
3. 행렬에서 배열 [1,2]를 슬라이싱 하세요
4. 행렬에서 배열 [[6],[11]]를 슬라이싱 하세요
5. 행렬에서 배열 [[8,9],[13,14]]를 슬라이이싱 하세요

'''
x = np.array([[0,1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]])

# 7 인덱싱 
# 2행 3열 => 1, 2
print(x[1, 2])

# 14 인덱싱 
# 3행 5열 => 2, 4
print(x[2, 4])
#print(x[-1, -1]) # 무조건 맨 마지막
#print(x[0, 0]) # 무조건 맨 처음

# 슬라이싱은 : 으로 쪼개오자

# [1, 2] 슬라이싱 
# 1행 2~3열 => 0, 1:3
print(x[0, 1:3])  # 1차원 [1 2]
print(x[:1, 1:3]) # 2차원 [[1 2]]

# [[6], [11]] 슬라이싱
# 2행 2열 , 3행 2열 => 1:, 1:2
print(x[1:, 1])   # 1차원 [6 11]
print(x[1:, 1:2]) # 2차원 [[6] [11]]

# [[8,9], [13,14]] 슬라이싱
# 2행 4~5열, 3행 4~5열 => 1:, 3:
print(x[1:, 3:])  # 2차원 [[8 9] [13 14]]

print("ㅡ" * 30)

d = np.array([ 0,    1,      2,    3,     4,    5,     6,    7,     8,    9])
e = np.array([True, False, False, False, True, True, False, True, False, True])
print(d[e]) # True 만 값이 나온다. [0 4 5 7 9]

# 짝수만 True, 아니면 False
print(d % 2 == 0) # 비교연산자 값은 True 또는 False 로 나온다.

# 위의 두개를 합친 것
print(d[d%2==0]) # 짝수인 것만 나온다. [0 2 4 6 8]








print("ㅡ" * 30)
